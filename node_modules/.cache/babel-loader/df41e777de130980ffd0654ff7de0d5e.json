{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Lenovo/Desktop/vscode/covid-19-tracker/Covid-19-Tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\vscode\\\\covid-19-tracker\\\\Covid-19-Tracker\\\\src\\\\sorting.js\",\n    _this = this;\n\nimport React from 'react';\nimport numeral from 'numeral';\nimport { Circle, Popup } from 'react-leaflet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar casesTypeColors = {\n  cases: {\n    multiplier: 800,\n    option: {\n      color: '#4351ba',\n      fillColor: '#4351ba'\n    }\n  },\n  recovered: {\n    multiplier: 1200,\n    option: {\n      color: '#7dd71d',\n      fillColor: '#7dd71d'\n    }\n  },\n  deaths: {\n    multiplier: 2000,\n    option: {\n      color: '#ff0000',\n      fillColor: '#ff0000'\n    }\n  }\n};\nexport var sortData = function sortData(data) {\n  var sortedData = _toConsumableArray(data); // if else method =>\n  // sortedData.sort((a,b) => {\n  //     if(a.cases > b.cases){\n  //         return -1;\n  //     }else{\n  //         return 1;\n  //     }\n  // });\n  // return sortedData\n  // oprators method =>\n\n\n  return sortedData.sort(function (a, b) {\n    return a.cases > b.cases ? -1 : 1;\n  });\n};\nexport var prettyPrintStat = function prettyPrintStat(stat) {\n  return stat ? \"+\".concat(numeral(stat).format(\"0.0a\")) : \"+0\";\n};\nexport var prettyPrintStat2 = function prettyPrintStat2(stat) {\n  return stat ? \"\".concat(numeral(stat).format(\"0.0 a\")) : \"0\";\n};\nexport var showDataOnMap = function showDataOnMap(data) {\n  var casesType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'cases';\n  return data.map(function (country) {\n    return /*#__PURE__*/_jsxDEV(Circle, {\n      center: [country.countryInfo.lat, country.countryInfo.long],\n      pathOptions: casesTypeColors[casesType].option,\n      fillOpacity: 0.4,\n      radius: Math.cbrt(country[casesType]) * 4 * casesTypeColors[casesType].multiplier,\n      children: /*#__PURE__*/_jsxDEV(Popup, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"info-flag\",\n            style: {\n              backgroundImage: \"url(\".concat(country.countryInfo.flag, \")\")\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 11\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"info-name\",\n            children: country.country\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 11\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"info-confirmed\",\n            children: [\"Cases: \", numeral(country.cases).format(\"0,0\")]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 11\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"info-recovered\",\n            children: [\"Recovered: \", numeral(country.recovered).format(\"0,0\")]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 11\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"info-deaths\",\n            children: [\"Deaths: \", numeral(country.deaths).format(\"0,0\")]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 11\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 5\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, _this);\n  });\n};","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/vscode/covid-19-tracker/Covid-19-Tracker/src/sorting.js"],"names":["React","numeral","Circle","Popup","casesTypeColors","cases","multiplier","option","color","fillColor","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","format","prettyPrintStat2","showDataOnMap","casesType","map","country","countryInfo","lat","long","Math","cbrt","backgroundImage","flag"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport numeral from 'numeral';\r\nimport { Circle, Popup } from 'react-leaflet';\r\n\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    multiplier: 800,\r\n    option: { color: '#4351ba', fillColor: '#4351ba' },\r\n  },\r\n  recovered: {\r\n    multiplier: 1200,\r\n    option: { color: '#7dd71d', fillColor: '#7dd71d' },\r\n  },\r\n  deaths: {\r\n    multiplier: 2000,\r\n    option: { color: '#ff0000', fillColor: '#ff0000' },\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n\r\n    // if else method =>\r\n\r\n    // sortedData.sort((a,b) => {\r\n    //     if(a.cases > b.cases){\r\n    //         return -1;\r\n    //     }else{\r\n    //         return 1;\r\n    //     }\r\n    // });\r\n    // return sortedData\r\n\r\n\r\n    // oprators method =>\r\n\r\n    return sortedData.sort((a,b)=>(a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const prettyPrintStat2 = (stat) =>\r\n  stat ? `${numeral(stat).format(\"0.0 a\")}` : \"0\";\r\n\r\nexport const showDataOnMap = (data, casesType = 'cases') =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      pathOptions={casesTypeColors[casesType].option}\r\n    fillOpacity={0.4}\r\n      radius={\r\n        Math.cbrt(country[casesType]) *4*(casesTypeColors[casesType].multiplier)\r\n      }\r\n    >\r\n    <Popup>\r\n    <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n    </Popup>\r\n    </Circle>\r\n  ));\r\n\r\n"]},"metadata":{},"sourceType":"module"}