{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Lenovo/Desktop/vscode/covid-19-tracker/Covid-19-Tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/Lenovo/Desktop/vscode/covid-19-tracker/Covid-19-Tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:/Users/Lenovo/Desktop/vscode/covid-19-tracker/Covid-19-Tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:/Users/Lenovo/Desktop/vscode/covid-19-tracker/Covid-19-Tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"casesType\"];\n\nvar _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\vscode\\\\covid-19-tracker\\\\Covid-19-Tracker\\\\src\\\\LineGraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport numeral from \"numeral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar options = {\n  legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function label(tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      }\n    }\n  },\n  scales: {\n    xAxes: [{\n      display: true,\n      type: 'time',\n      time: {\n        format: \"DD/MM/YY\",\n        tooltipFormat: \"ll\",\n        time: {\n          parser: 'MM/DD/YYYY HH:mm',\n          tooltipFormat: 'll HH:mm',\n          unit: 'day',\n          unitStepSize: 1,\n          displayFormats: {\n            'day': 'MM/DD/YYYY'\n          }\n        }\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        display: false\n      },\n      ticks: {\n        // Include a dollar sign in the ticks\n        callback: function callback(value, index, values) {\n          return numeral(value).format(\"0a\");\n        }\n      }\n    }]\n  }\n};\n\nvar buildChartData = function buildChartData(data, casesType) {\n  var chartData = [];\n  var lastDataPoint;\n\n  for (var date in data.cases) {\n    if (lastDataPoint) {\n      var newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint\n      };\n      chartData.push(newDataPoint);\n    }\n\n    lastDataPoint = data[casesType][date];\n  }\n\n  return chartData;\n};\n\nfunction LineGraph(_ref) {\n  _s();\n\n  var casesType = _ref.casesType,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  useEffect(function () {\n    var fetchData = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\").then(function (response) {\n                  return response.json();\n                }).then(function (data) {\n                  var chartData = buildChartData(data, casesType);\n                  setData(chartData); // console.log(chartData);\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchData() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    fetchData();\n  }, [casesType]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: props.className,\n    children: (data === null || data === void 0 ? void 0 : data.length) > 0 && /*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: {\n        datasets: [{\n          label: 'cases',\n          backgroundColor: \"rgba(204 , 16 , 52 ,0.5)\",\n          borderColor: \"#CC1034\",\n          data: data\n        }]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LineGraph, \"tNVKLF/eI269iIOS4WygXQde5D8=\");\n\n_c = LineGraph;\nexport default LineGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/vscode/covid-19-tracker/Covid-19-Tracker/src/LineGraph.js"],"names":["React","useState","useEffect","Line","numeral","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","format","scales","xAxes","type","time","tooltipFormat","parser","unit","unitStepSize","displayFormats","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","chartData","lastDataPoint","date","cases","newDataPoint","x","y","push","LineGraph","props","setData","fetchData","fetch","then","response","json","className","length","datasets","backgroundColor","borderColor"],"mappings":"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","sourcesContent":["import React , { useState , useEffect } from 'react'\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        display: true,\r\n            type: 'time',\r\n        time: {\r\n          format: \"DD/MM/YY\",\r\n          tooltipFormat: \"ll\",\r\n          time: {\r\n            parser: 'MM/DD/YYYY HH:mm',\r\n            tooltipFormat: 'll HH:mm',\r\n            unit: 'day',\r\n            unitStepSize: 1,\r\n            displayFormats: {\r\n              'day': 'MM/DD/YYYY'\r\n            }}\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n\r\n};\r\nconst buildChartData = ( data , casesType) => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n\r\n    for(let date in data.cases) {\r\n        if(lastDataPoint){\r\n            const newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint,\r\n            } ;  \r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n\r\n    return chartData;\r\n};\r\n\r\n\r\n\r\nfunction LineGraph({casesType , ...props}) {\r\n    const [data, setData] = useState({});\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n          await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then((response) => {\r\n              return response.json();\r\n            })\r\n            .then((data) => {\r\n              let chartData = buildChartData(data, casesType);\r\n              setData(chartData);\r\n              // console.log(chartData);\r\n            });\r\n        };\r\n    \r\n        fetchData();\r\n      }, [casesType]);\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length > 0 && (\r\n            <Line\r\n            options={options}\r\n             data={{\r\n                datasets : [\r\n                {\r\n                    label: 'cases',\r\n                    backgroundColor: \"rgba(204 , 16 , 52 ,0.5)\",\r\n                    borderColor : \"#CC1034\",\r\n                    data : data,\r\n                },\r\n                ],\r\n            }}\r\n            \r\n            />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LineGraph\r\n "]},"metadata":{},"sourceType":"module"}