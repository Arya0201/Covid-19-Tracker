{"version":3,"sources":["InfoBox.js","sorting.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","active","isBlue","isGreen","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","multiplier","option","fillColor","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","pathOptions","fillOpacity","radius","Math","cbrt","Popup","style","backgroundImage","flag","ChangeMapView","coords","zoom","useMap","setView","lng","Map","countries","TileLayer","url","attribution","Table","uuid","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","parser","unit","unitStepSize","displayFormats","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetchData","fetch","then","response","json","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","getCountriesData","name","iso2","sortedData","onCountryChange","event","countryCode","target","id","particlesOptions","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"s6BAuBeA,MAnBf,YAAqF,IAAlEC,EAAiE,EAAjEA,MAAQC,EAAyD,EAAzDA,MAAQC,EAAiD,EAAjDA,OAASC,EAAwC,EAAxCA,OAASC,EAA+B,EAA/BA,QAAUC,EAAqB,EAArBA,MAAWC,EAAU,iBAChF,OACI,cAACC,EAAA,EAAD,CACAC,QAASF,EAAME,QACfC,UAAS,kBAAaP,GAAU,oBAAvB,YAA+CC,GAAU,gBAAzD,YAA8EC,GAAW,kBAFlG,SAKI,eAACM,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAM,gBAAlB,SACKZ,IAEL,oBAAIS,UAAS,yBAAoBN,GAAUC,GAAW,uBAAzC,aAAoED,IAAWC,GAAW,qBAA1F,KAAb,SAAiIH,IACjI,eAACU,EAAA,EAAD,CAAYF,UAAU,gBAAgBG,MAAM,gBAA5C,UAA6DP,EAA7D,kB,+ECXVQ,EAAkB,CACtBZ,MAAO,CACLa,WAAY,IACZC,OAAQ,CAAEH,MAAO,UAAWI,UAAW,YAEzCC,UAAW,CACTH,WAAY,KACZC,OAAQ,CAAEH,MAAO,UAAWI,UAAW,YAEzCE,OAAQ,CACNJ,WAAY,IACZC,OAAQ,CAAEH,MAAO,UAAWI,UAAW,aAI9BG,EAAW,SAACC,GAkBrB,OAjBgB,YAAOA,GAiBLC,MAAK,SAACC,EAAEC,GAAH,OAAQD,EAAErB,MAAQsB,EAAEtB,OAAS,EAAI,MAG/CuB,EAAkB,SAACC,GAAD,OAC7BA,EAAI,WAAOC,IAAQD,GAAME,OAAO,SAAY,MAKjCC,EAAgB,SAACR,GAAD,IAAOS,EAAP,uDAAmB,QAAnB,OAC3BT,EAAKU,KAAI,SAACC,GAAD,OACP,cAACC,EAAA,EAAD,CACEC,OAAQ,CAACF,EAAQG,YAAYC,IAAKJ,EAAQG,YAAYE,MACtDC,YAAaxB,EAAgBgB,GAAWd,OAC1CuB,YAAa,GACXC,OACiC,EAA/BC,KAAKC,KAAKV,EAAQF,IAAgBhB,EAAgBgB,GAAWf,WALjE,SAQA,cAAC4B,EAAA,EAAD,UACA,sBAAKjC,UAAU,iBAAf,UACM,qBACEA,UAAU,YACVkC,MAAO,CAAEC,gBAAgB,OAAD,OAASb,EAAQG,YAAYW,KAA7B,QAE1B,qBAAKpC,UAAU,YAAf,SAA4BsB,EAAQA,UACpC,sBAAKtB,UAAU,iBAAf,oBACUiB,IAAQK,EAAQ9B,OAAO0B,OAAO,UAExC,sBAAKlB,UAAU,iBAAf,wBACciB,IAAQK,EAAQd,WAAWU,OAAO,UAEhD,sBAAKlB,UAAU,cAAf,qBACWiB,IAAQK,EAAQb,QAAQS,OAAO,qBCjEpD,SAASmB,EAAT,GAA0C,IAAjBC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,KAI/B,OAHYC,cACRC,QAAQ,CAACH,EAAOZ,IAAKY,EAAOI,KAAMH,GAE/B,KAoBMI,MAjBf,YAAuD,IAAzCC,EAAwC,EAAxCA,UAAYxB,EAA4B,EAA5BA,UAAYI,EAAgB,EAAhBA,OAAQe,EAAQ,EAARA,KAC5C,OACE,qBAAKvC,UAAU,MAAf,SACE,eAAC,IAAD,CAAYwB,OAAQA,EAAQe,KAAMA,EAAlC,UACE,cAACM,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,2EAGd,cAACV,EAAD,CAAeC,OAAQd,EAAQe,KAAMA,IACpCpB,EAAcyB,EAAYxB,S,kBCLpB4B,MAbf,YAA+B,IAAdJ,EAAa,EAAbA,UACb,OAAM,qBAAK5C,UAAU,QAAf,SACG4C,EAAUvB,KAAI,gBAAEC,EAAF,EAAEA,QAAU9B,EAAZ,EAAYA,MAAZ,OACX,+BACI,6BAAkB,iCAAS8B,KAAlB2B,eACT,6BACI,iCAAShC,IAAQzB,GAAO0B,OAAO,oB,yBCPjDgC,EAAU,CACdC,OAAQ,CACNC,SAAS,GAEXC,SAAU,CACRC,MAAO,CACLxB,OAAQ,IAGZyB,qBAAqB,EACrBC,SAAU,CACRC,KAAM,QACNC,WAAW,EACXC,UAAW,CACTC,MAAO,SAAUC,EAAalD,GAC5B,OAAOM,IAAQ4C,EAAYC,OAAO5C,OAAO,WAI/C6C,OAAQ,CACNC,MAAO,CACL,CACEZ,SAAS,EACLa,KAAM,OACVC,KAAM,CACJhD,OAAQ,WACRiD,cAAe,KACfD,KAAM,CACJE,OAAQ,mBACRD,cAAe,WACfE,KAAM,MACNC,aAAc,EACdC,eAAgB,CACd,IAAO,kBAKjBC,MAAO,CACL,CACEC,UAAW,CACTrB,SAAS,GAEXsB,MAAO,CAELC,SAAU,SAAUb,EAAOc,EAAOC,GAChC,OAAO5D,IAAQ6C,GAAO5C,OAAO,YAQnC4D,EAAiB,SAAEnE,EAAOS,GAC5B,IACI2D,EADAC,EAAY,GAGhB,IAAI,IAAIC,KAAQtE,EAAKnB,MAAO,CACxB,GAAGuF,EAAc,CACb,IAAMG,EAAe,CACjBC,EAAGF,EACHG,EAAGzE,EAAKS,GAAW6D,GAAQF,GAE/BC,EAAUK,KAAKH,GAEnBH,EAAgBpE,EAAKS,GAAW6D,GAGpC,OAAOD,GAkDIM,MA7Cf,YAA4C,IAAxBlE,EAAuB,EAAvBA,UAAevB,EAAQ,iBACvC,EAAwB0F,mBAAS,IAAjC,mBAAO5E,EAAP,KAAa6E,EAAb,KAsBA,OAnBAC,qBAAU,WACN,IAAMC,EAAS,uCAAG,sBAAA7E,EAAA,sEACV8E,MAAM,8DACTC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACjF,GACL,IAAIqE,EAAYF,EAAenE,EAAMS,GACrCoE,EAAQR,MAPI,2CAAH,qDAYfU,MACC,CAACtE,IAMF,qBAAKpB,UAAWH,EAAMG,UAAtB,UACS,OAAJW,QAAI,IAAJA,OAAA,EAAAA,EAAMoF,QAAS,GAChB,cAAC,IAAD,CACA7C,QAASA,EACRvC,KAAM,CACHqF,SAAW,CACX,CACIpC,MAAO,QACPqC,gBAAiB,2BACjBC,YAAc,UACdvF,KAAOA,U,oCC6CZwF,MAzIf,SAAatG,GACX,MAAkC0F,mBAAS,IAA3C,mBAAO3C,EAAP,KAAkBwD,EAAlB,KACA,EAA8Bb,mBAAS,aAAvC,mBAAOjE,EAAP,KAAgB+E,EAAhB,KACA,EAAsCd,mBAAS,IAA/C,mBAAO9D,EAAP,KAAoB6E,EAApB,KACA,EAAkCf,mBAAS,IAA3C,mBAAOgB,EAAP,KAAkBC,EAAlB,KACA,EAAkCjB,mBAAS,CAAE7D,IAAK,SAAUgB,KAAM,UAAlE,mBAAO+D,EAAP,KAAkBC,EAAlB,KACA,EAA8BnB,mBAAS,GAAvC,mBAAOoB,EAAP,KAAgBC,EAAhB,KACA,EAAwCrB,mBAAS,IAAjD,mBAAOsB,EAAP,KAAqBC,EAArB,KACA,EAAkCvB,mBAAS,SAA3C,mBAAOnE,EAAP,KAAkB2F,EAAlB,KAIAtB,qBAAU,WACRE,MAAM,sCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACjF,GACL2F,EAAe3F,QAElB,IAEH8E,qBAAU,WACR,IAAMuB,EAAgB,uCAAG,sBAAAnG,EAAA,sEACjB8E,MAAM,4CACTC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACjF,GACL,IAAMiC,EAAYjC,EAAKU,KAAI,SAACC,GAAD,MAAc,CACvC2F,KAAM3F,EAAQA,QACdwC,MAAOxC,EAAQG,YAAYyF,SAGvBC,EAAazG,EAASC,GAC5B6F,EAAaW,GACbL,EAAgBnG,GAChByF,EAAaxD,MAZM,2CAAH,qDAgBtBoE,MACC,IAEH,IAAMI,EAAe,uCAAG,WAAOC,GAAP,iBAAAxG,EAAA,6DAChByG,EAAcD,EAAME,OAAOzD,MAE3BhB,EACY,cAAhBwE,EACI,qCADJ,mDAEgDA,GAN5B,SAQhB3B,MAAM7C,GACT8C,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACjF,GAGL,GAFA0F,EAAWiB,GACXhB,EAAe3F,GACiB,qBAArBA,EAAKc,YAA6B,CAC3C,MAEId,EADFc,YAAeC,EADjB,EACiBA,IAAKC,EADtB,EACsBA,KAEtB+E,EAAa,CAAEhF,MAAKgB,IAAKf,IAEzBiF,EAAW,QAEXF,EAAa,CAAEhF,IAAK,SAAUgB,KAAM,UACpCkE,EAAW,MAtBK,2CAAH,sDA2BrB,OACE,qCACC,cAAC,IAAD,CAAWY,GAAG,eAAetE,QAASuE,IACvC,sBAAKzH,UAAU,MAAf,UACE,sBAAKA,UAAU,WAAf,UACE,sBAAKA,UAAU,aAAf,UACE,oBAAIA,UAAU,UAAd,8BAEA,cAAC0H,EAAA,EAAD,CAA0B1H,UAAU,eAApC,SACE,eAAC2H,EAAA,EAAD,CACEC,QAAQ,WACRC,SAAUT,EACVtD,MAAOxC,EAHT,UAKE,cAACwG,EAAA,EAAD,CAAU9H,UAAU,YAAY8D,MAAM,YAAtC,uBACClB,EAAUvB,KAAI,SAACC,GAAD,OACb,cAACwG,EAAA,EAAD,CAAwB9H,UAAU,mBAAmB8D,MAAOxC,EAAQwC,MAApE,SAA4ExC,EAAQ2F,MAApEhE,sBARJA,kBAepB,sBAAKjD,UAAU,YAAf,UACE,cAAC,EAAD,CACCP,OAAsB,UAAd2B,EACR1B,QAAM,EACLK,QAAS,SAACgI,GAAD,OAAOhB,EAAa,UAC7BxH,MAAM,oBACNC,MAAOuB,EAAgBU,EAAYuG,YACnCpI,MAAOqB,IAAQQ,EAAYjC,OAAO0B,OAAO,SAE3C,cAAC,EAAD,CACAvB,SAAO,EACPF,OAAsB,cAAd2B,EACNrB,QAAS,SAACgI,GAAD,OAAOhB,EAAa,cAC7BxH,MAAM,YACNC,MAAOuB,EAAgBU,EAAYwG,gBACnCrI,MAAOqB,IAAQQ,EAAYjB,WAAWU,OAAO,SAE/C,cAAC,EAAD,CACAzB,OAAsB,WAAd2B,EACNrB,QAAS,SAACgI,GAAD,OAAOhB,EAAa,WAC7BxH,MAAM,SACNC,MAAOuB,EAAgBU,EAAYyG,aACnCtI,MAAOqB,IAAQQ,EAAYhB,QAAQS,OAAO,YAExC,uBAEN,cAAC,EAAD,CACAE,UAAWA,EACXwB,UAAWiE,EACXrF,OAAQiF,EACRlE,KAAMoE,OAER,cAAC7G,EAAA,EAAD,CAAME,UAAU,YAAhB,SACE,eAACC,EAAA,EAAD,WACE,oBAAID,UAAU,iBAAd,oCACA,cAAC,EAAD,CAAO4C,UAAW2D,IAClB,qBAAIvG,UAAU,iBAAd,2BAA8CoB,KAC9C,cAAC,EAAD,CAAYpB,UAAU,YAAYoB,UAAYA,gBCvIzC+G,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBzC,MAAK,YAAkD,IAA/C0C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1e8819f1.chunk.js","sourcesContent":["  import React from 'react';\r\n  import \"./InfoBox.css\";\r\n  import { Card , CardContent , Typography } from  '@mui/material';\r\n\r\nfunction InfoBox({ title , cases , active , isBlue , isGreen , total , ...props } ) {\r\n    return (\r\n        <Card\r\n        onClick={props.onClick}\r\n        className={`infoBox ${active && \"infoBox--selected\"} ${ isBlue && \"infoBox--blue\" } ${ isGreen && \"infoBox--green\" }`}\r\n      >\r\n    \r\n            <CardContent>\r\n                <Typography color=\"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n                <h2 className={`infoBox_cases ${!isBlue && isGreen && \"infoBox_cases--green\"} ${!isBlue && !isGreen && \"infoBox_cases--red\"} `}>{cases}</h2>\r\n                <Typography className=\"infoBox_total\" color=\"textSecondary\">{total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport { Circle, Popup } from 'react-leaflet';\r\n\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    multiplier: 800,\r\n    option: { color: '#4351ba', fillColor: '#4351ba' },\r\n  },\r\n  recovered: {\r\n    multiplier: 1200,\r\n    option: { color: '#7dd71d', fillColor: '#7dd71d' },\r\n  },\r\n  deaths: {\r\n    multiplier: 2000,\r\n    option: { color: '#ff0000', fillColor: '#ff0000' },\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n\r\n    // if else method =>\r\n\r\n    // sortedData.sort((a,b) => {\r\n    //     if(a.cases > b.cases){\r\n    //         return -1;\r\n    //     }else{\r\n    //         return 1;\r\n    //     }\r\n    // });\r\n    // return sortedData\r\n\r\n\r\n    // oprators method =>\r\n\r\n    return sortedData.sort((a,b)=>(a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const prettyPrintStat2 = (stat) =>\r\n  stat ? `${numeral(stat).format(\"0.0 a\")}` : \"0\";\r\n\r\nexport const showDataOnMap = (data, casesType = 'cases') =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      pathOptions={casesTypeColors[casesType].option}\r\n    fillOpacity={0.4}\r\n      radius={\r\n        Math.cbrt(country[casesType]) *4*(casesTypeColors[casesType].multiplier)\r\n      }\r\n    >\r\n    <Popup>\r\n    <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n    </Popup>\r\n    </Circle>\r\n  ));\r\n\r\n","import React from \"react\";\r\nimport { MapContainer as LeafletMap, TileLayer , useMap } from 'react-leaflet';\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./sorting\";\r\n// import { showDataOnMap } from \"./util\";\r\n\r\nfunction ChangeMapView({ coords, zoom }) {\r\n  const map = useMap();\r\n  map.setView([coords.lat, coords.lng], zoom);\r\n\r\n  return null;\r\n}\r\n\r\nfunction Map({countries , casesType , center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {/* {showDataOnMap(countries, casesType)} */}\r\n        <ChangeMapView coords={center} zoom={zoom} />\r\n        {showDataOnMap(countries , casesType)}\r\n      </LeafletMap>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;","import React from 'react';\r\nimport './Table.css';\r\nimport numeral from 'numeral';\r\nimport { v1 as uuid } from 'uuid';\r\n\r\nfunction Table({ countries }) {\r\n    return<div className=\"table\">\r\n            {countries.map(({country , cases }) => (\r\n                <tr>\r\n                    <td key={uuid() }><strong>{country}</strong></td>\r\n                    <td>\r\n                        <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n}\r\n\r\nexport default Table\r\n","import React , { useState , useEffect } from 'react'\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        display: true,\r\n            type: 'time',\r\n        time: {\r\n          format: \"DD/MM/YY\",\r\n          tooltipFormat: \"ll\",\r\n          time: {\r\n            parser: 'MM/DD/YYYY HH:mm',\r\n            tooltipFormat: 'll HH:mm',\r\n            unit: 'day',\r\n            unitStepSize: 1,\r\n            displayFormats: {\r\n              'day': 'MM/DD/YYYY'\r\n            }}\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n\r\n};\r\nconst buildChartData = ( data , casesType) => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n\r\n    for(let date in data.cases) {\r\n        if(lastDataPoint){\r\n            const newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint,\r\n            } ;  \r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n\r\n    return chartData;\r\n};\r\n\r\n\r\n\r\nfunction LineGraph({casesType , ...props}) {\r\n    const [data, setData] = useState({});\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n          await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then((response) => {\r\n              return response.json();\r\n            })\r\n            .then((data) => {\r\n              let chartData = buildChartData(data, casesType);\r\n              setData(chartData);\r\n              // console.log(chartData);\r\n            });\r\n        };\r\n    \r\n        fetchData();\r\n      }, [casesType]);\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length > 0 && (\r\n            <Line\r\n            options={options}\r\n             data={{\r\n                datasets : [\r\n                {\r\n                    label: 'cases',\r\n                    backgroundColor: \"rgba(204 , 16 , 52 ,0.5)\",\r\n                    borderColor : \"#CC1034\",\r\n                    data : data,\r\n                },\r\n                ],\r\n            }}\r\n            \r\n            />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LineGraph\r\n ","import \"./App.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n  Card,\r\n  CardContent,\r\n} from \"@mui/material\";\r\nimport InfoBox from \"./InfoBox\";\r\nimport Map from \"./Map\";\r\nimport { sortData, prettyPrintStat } from \"./sorting\";\r\nimport Table from \"./Table\";\r\nimport LineGraph from \"./LineGraph\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport numeral from 'numeral';\r\nimport Particles from \"react-tsparticles\";\r\nimport particlesOptions from \"./particles.json\";\r\nimport { v1 as uuid } from 'uuid';\r\n\r\nfunction App(props) {\r\n  const [countries, setCountries] = useState([]);\r\n  const [country, setCountry] = useState(\"worldwide\");\r\n  const [countryInfo, setCountryInfo] = useState({});\r\n  const [tableData, setTableData] = useState([]);\r\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\r\n  const [mapZoom, setMapZoom] = useState(3);\r\n  const [mapCountries, setMapCountries] = useState([]);\r\n  const [casesType, setCasesType] = useState(\"cases\");\r\n  \r\n\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://disease.sh/v3/covid-19/all\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setCountryInfo(data);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getCountriesData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const countries = data.map((country) => ({\r\n            name: country.country,\r\n            value: country.countryInfo.iso2,\r\n          }));\r\n\r\n          const sortedData = sortData(data);\r\n          setTableData(sortedData);\r\n          setMapCountries(data);\r\n          setCountries(countries);\r\n        });\r\n    };\r\n\r\n    getCountriesData();\r\n  }, []);\r\n\r\n  const onCountryChange = async (event) => {\r\n    const countryCode = event.target.value;\r\n\r\n    const url =\r\n      countryCode === \"worldwide\"\r\n        ? \"https://disease.sh/v3/covid-19/all\"\r\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\r\n\r\n    await fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setCountry(countryCode);\r\n        setCountryInfo(data);\r\n        if (typeof data.countryInfo !== \"undefined\") {\r\n          const {\r\n            countryInfo: { lat, long },\r\n          } = data;\r\n          setMapCenter({ lat, lng: long });\r\n\r\n          setMapZoom(4);\r\n        } else {\r\n          setMapCenter({ lat: 34.80746, lng: -40.4796 });\r\n          setMapZoom(3);\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n     <Particles id=\"particles-js\" options={particlesOptions} />\r\n    <div className=\"app\">\r\n      <div className=\"app_left\">\r\n        <div className=\"app_header\">\r\n          <h1 className=\"Headerp\">COVID-19 TRACKER</h1>\r\n          \r\n          <FormControl key={uuid()} className=\"app_dropdown\">\r\n            <Select\r\n              variant=\"outlined\"\r\n              onChange={onCountryChange}\r\n              value={country}\r\n            >\r\n              <MenuItem className=\"worldtest\" value=\"worldwide\">Worldwide</MenuItem>\r\n              {countries.map((country) => (\r\n                <MenuItem  key={uuid()} className=\"app_dropdownItem\" value={country.value}>{country.name}</MenuItem>\r\n                \r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n\r\n        <div className=\"app_stats\">\r\n          <InfoBox\r\n           active={casesType === \"cases\"}\r\n           isBlue\r\n            onClick={(e) => setCasesType(\"cases\")}\r\n            title=\"Coronavirus Cases\"\r\n            cases={prettyPrintStat(countryInfo.todayCases)}\r\n            total={numeral(countryInfo.cases).format(\"0,0\")}\r\n          />\r\n          <InfoBox\r\n          isGreen\r\n          active={casesType === \"recovered\"}\r\n            onClick={(e) => setCasesType(\"recovered\")}\r\n            title=\"Recovered\"\r\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\r\n            total={numeral(countryInfo.recovered).format(\"0,0\")}\r\n          />\r\n          <InfoBox\r\n          active={casesType === \"deaths\"}\r\n            onClick={(e) => setCasesType(\"deaths\")}\r\n            title=\"Deaths\"\r\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\r\n            total={numeral(countryInfo.deaths).format(\"0,0\")}\r\n          />\r\n        </div><br/>\r\n       \r\n        <Map \r\n        casesType={casesType}\r\n        countries={mapCountries} \r\n        center={mapCenter} \r\n        zoom={mapZoom} />\r\n      </div>\r\n      <Card className=\"app_right\">\r\n        <CardContent>\r\n          <h3 className=\"app_Tabletitle\">Live Cases by Country </h3>\r\n          <Table countries={tableData} />\r\n          <h3 className=\"app_graphTitle\">Worldwide new {casesType}</h3>\r\n          <LineGraph  className=\"app_graph\" casesType ={casesType} />\r\n        </CardContent>\r\n      </Card>\r\n     \r\n    </div>\r\n    </>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}